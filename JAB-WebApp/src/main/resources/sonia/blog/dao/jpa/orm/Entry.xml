<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings version="1.0" xmlns="http://java.sun.com/xml/ns/persistence/orm"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd">
  <persistence-unit-metadata>
    <persistence-unit-defaults>
      <access>FIELD</access>
    </persistence-unit-defaults>
  </persistence-unit-metadata>
  <package>sonia.blog.entity</package>
  <entity metadata-complete="true" name="Entry" class="sonia.blog.entity.Entry">
    <table name="JAB_ENTRY" />
    <named-query name="Entry.getAll">
      <query>
        select e from Entry e
      </query>
    </named-query>
    <named-query name="Entry.getAllByBlogAndUser">
      <query>
        select e from Entry e join e.blog b
        where
          b = :blog
        and
          e.author = :user
        order by e.publishingDate desc
      </query>
    </named-query>
    <named-query name="Entry.countByBlogAndUser">
      <query>
        select count(e) from Entry e join e.blog b
        where
          b = :blog
        and
          e.author = :user
      </query>
    </named-query>
    <named-query name="Entry.getAllByActive">
      <query>
        select e from Entry e
        where
          e.published = :active
        order by e.publishingDate desc
      </query>
    </named-query>
    <named-query name="Entry.getAllByBlogAndActive">
      <query>
        select e from Entry e join e.blog b
        where
          b = :blog
        and
          e.published = :active
        order by e.publishingDate desc
      </query>
    </named-query>
    <named-query name="Entry.getAllByBlog">
      <query>
        select e from Entry e join e.blog b
        where
          b = :blog
        order by e.publishingDate desc
      </query>
    </named-query>
    <named-query name="Entry.getByCategory">
      <query>
        select e from Entry as e 
        where
          e.categories = :category
        and
          e.published = true
        order by e.publishingDate desc
      </query>
    </named-query>
    <named-query name="Entry.getAllByBlogAndTag">
      <query>
        select e from Entry e join e.blog b join e.tags t 
        where
          e.published = :active
        and
          b = :blog
        and
          t = :tag
        order by e.publishingDate desc
      </query>
    </named-query>
    <named-query name="Entry.findByTagId">
      <query>
        select e from Entry e join e.tags t
        where
          e.published = true
        and
          t.id = :tagId
        order by e.publishingDate desc
      </query>
    </named-query>
    <named-query name="Entry.findByTagName">
      <query>
        select e from Entry e join e.blog b join e.tags t
        where
          b = :blog
        and
          e.published = true
        and
          t.name = :name
        order by e.publishingDate desc
      </query>
    </named-query>
    <named-query name="Entry.findByCategoryId">
      <query>
        select e From Entry e join e.categories c
        where
          c.id = :id
        and
          e.published = true
        order by e.publishingDate desc
      </query>
    </named-query>
    <named-query name="Entry.findByBlogAndDate">
      <query>
        select e from Entry e join e.blog b
        where
          b = :blog
        and
          e.published = true
        and
          e.publishingDate between :start and :end
        order by e.publishingDate desc, e.title
      </query>
    </named-query>
    <named-query name="Entry.calendar">
      <query>
        select e.creationDate from Entry e join e.blog b 
        where
          b = :blog
        and
          e.published = true
        and
          e.creationDate between :start and :end
      </query>
    </named-query>
    <named-query name="Entry.count">
      <query>
        select count(e) from Entry e
      </query>
    </named-query>
    <named-query name="Entry.findAllDraftsByBlogAndUser">
      <query>
        select e from Entry e join e.blog b
        where
          b = :blog
        and
          e.published = false
        and
          e.author = :user
        order by e.publishingDate desc
      </query>
    </named-query>
    <named-query name="Entry.countByBlog">
      <query>
        select count(e) from Entry e join e.blog b 
        where
          b = :blog
      </query>
    </named-query>
    <named-query name="Entry.countByCategory">
      <query>
        select count(e) from Entry e
        where
          e.categories = :category
      </query>
    </named-query>
    <named-query name="Entry.getAllByAuthor">
      <query>
        select
          e from Entry e
        where
          e.blog = :blog
        and
          e.author = :author
        and
          e.published = :published
        order by
          e.publishingDate desc
      </query>
    </named-query>
    <named-query name="Entry.prev">
      <query>
        select e from Entry e join e.blog b
        where
          e.published = :published
        and
          b = :blog
        and
          e.publishingDate = ( select max(e2.publishingDate) from Entry e2 join e2.blog b2
                               where
                                 e2.published = :published 
                               and
                                 b2 = :blog
                               and
                                 e2.publishingDate &lt; :date)
        order by
          e.publishingDate desc, e.title
      </query>
    </named-query>
    <named-query name="Entry.next">
      <query>
        select e from Entry e join e.blog b
        where
          e.published = :published
        and
          b = :blog
        and
          e.publishingDate = ( select min(e2.publishingDate) from Entry e2 join e2.blog b2
                               where
                                 e2.published = :published
                               and
                                 b2 = :blog
                               and
                                 e2.publishingDate &gt; :date )
        order by
          e.publishingDate, e.title
      </query>
    </named-query>
    <named-query name="Entry.categoryPrev">
      <query>
        select e from Entry e join e.categories c
        where
          e.published = :published
        and
          c = :category
        and
          e.publishingDate = ( select max(e2.publishingDate) from Entry e2 join e2.categories c2
                               where
                                 e2.published = :published
                               and
                                 c2 = :category
                               and
                                 e2.publishingDate &lt; :date )
        order by
          e.publishingDate desc, e.title
      </query>
    </named-query>
    <named-query name="Entry.categoryNext">
      <query>
        select e from Entry e join e.categories c
        where
          e.published = :published
        and
          c = :category
        and
          e.publishingDate = ( select min(e2.publishingDate) from Entry e2 join e2.categories c2
                               where
                                 e2.published = :published
                               and
                                 c2 = :category
                               and
                                 e2.publishingDate &gt; :date )
        order by
          e.publishingDate desc, e.title
      </query>
    </named-query>
    <named-query name="Entry.tagPrev">
      <query>
        select e from Entry e join e.blog b join e.tags t
        where
          e.published = :published
        and
          b = :blog
        and
          t = :tag
        and
          e.publishingDate = ( select max(e2.publishingDate) from Entry e2 join e2.blog b2 join e2.tags t2
                               where
                                 e2.published = :published
                               and
                                 b2 = :blog
                               and
                                 t2 = :tag
                               and
                                 e2.publishingDate &lt; :date )
        order by
          e.publishingDate desc, e.title
      </query>
    </named-query>
    <named-query name="Entry.tagNext">
      <query>
        select e from Entry e join e.blog b join e.tags t
        where
          e.published = :published
        and
          b = :blog
        and
          t = :tag
        and
          e.publishingDate = ( select min(e2.publishingDate) from Entry e2 join e2.blog b2 join e2.tags t2
                               where
                                 e2.published = :published
                               and
                                 b2 = :blog
                               and
                                 t2 = :tag
                               and
                                 e2.publishingDate &gt; :date )
        order by
          e.publishingDate desc, e.title
      </query>
    </named-query>
    <named-query name="Entry.datePrev">
      <query>
        select e from Entry e join e.blog b
        where
          b = :blog
        and
          e.published = :published
        and
          e.publishingDate = ( select max(e2.publishingDate) from Entry e2 join e2.blog b2
                               where
                                 e2.published = :published
                               and
                                 b2 = :blog
                               and
                                 e2.publishingDate between :start and :end
                               and
                                 e2.publishingDate &lt; :date )
        order by e.publishingDate desc, e.title
      </query>
    </named-query>
    <named-query name="Entry.dateNext">
      <query>
        select e from Entry e join e.blog b
        where
          b = :blog
        and
          e.published = :published
        and
          e.publishingDate = ( select min(e2.publishingDate) from Entry e2 join e2.blog b2
                               where
                                 e2.published = :published
                               and
                                 b2 = :blog
                               and
                                 e2.publishingDate between :start and :end
                               and
                                 e2.publishingDate &gt; :date )
        order by e.publishingDate desc, e.title
      </query>
    </named-query>
    <named-query name="Entry.authorPrev">
      <query>
        select e from Entry e join e.blog b
        where
          b = :blog
        and
          e.author = :author
        and
          e.published = :published
        and
          e.publishingDate = ( select max(e2.publishingDate) from Entry e2 join e2.blog b2
                               where
                                 e2.published = :published
                               and
                                 b2 = :blog
                               and
                                 e2.author = :author
                               and
                                 e2.publishingDate &lt; :date )
        order by e.publishingDate desc, e.title
      </query>
    </named-query>
    <named-query name="Entry.authorNext">
      <query>
        select e from Entry e join e.blog b
        where
          e.published = :published
        and
          b = :blog
        and
          e.author = :author
        and
          e.publishingDate = ( select min(e2.publishingDate) from Entry e2 join e2.blog b2
                               where
                                 e2.published = :published
                               and
                                 b2 = :blog
                               and
                                 e2.author = :author
                               and
                                 e2.publishingDate &gt; :date )
        order by
          e.publishingDate desc, e.title
      </query>
    </named-query>
    <pre-persist method-name="prePersists" />
    <pre-update method-name="preUpdate" />
    <attributes>
      <id name="id">
        <generated-value strategy="IDENTITY" />
      </id>
      <basic name="title">
        <column nullable="false" />
      </basic>
      <basic name="teaser">
        <column length="4000" />
      </basic>
      <basic name="content">
        <lob />
      </basic>
      <basic name="creationDate">
        <column nullable="false" />
        <temporal>TIMESTAMP</temporal>
      </basic>
      <basic name="lastUpdate">
        <temporal>TIMESTAMP</temporal>
      </basic>
      <basic name="publishingDate">
        <temporal>TIMESTAMP</temporal>
      </basic>
      <many-to-one name="author" optional="false" />
      <many-to-one name="blog" optional="false" fetch="LAZY" />
      <one-to-many name="attachments" mapped-by="entry">
        <cascade>
          <cascade-merge />
          <cascade-remove />
        </cascade>
      </one-to-many>
      <one-to-many name="comments" mapped-by="entry">
        <cascade>
          <cascade-merge />
          <cascade-remove />
        </cascade>
      </one-to-many>
      <many-to-many name="categories" fetch="LAZY">
        <order-by>name</order-by>
        <cascade>
          <cascade-merge />
        </cascade>
      </many-to-many>
      <many-to-many name="tags" fetch="LAZY">
        <order-by>name</order-by>
      </many-to-many>
    </attributes>
  </entity>
</entity-mappings>
